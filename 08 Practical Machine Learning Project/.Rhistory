data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(mixtures$Superplasticizer)
log()
log(mixtures$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(AlzheimerDisease)
View(adData)
View(training)
select(training, startsWith("IL"))
library(dplyr)
select(training, startsWith("IL"))
?select
select(training, starts_with("IL"))
IL_predictors<-select(training, starts_with("IL"))
View(IL_predictors)
Alz_IL<-cbind(adData$diagnosis, IL_predictors)
dim(adData$diagnosis)
dim(IL_predictors)
length(adData$diagnosis)
length(adData$IL_7)
length(training$diagnosis)
Alz_IL<-cbind(training$diagnosis, IL_predictors)
preProcess(training, method = "pca")
preProcess(Alz_IL, method = "pca")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433); data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433); data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
set.seed(3433); data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]; training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_predictors<-select(training, starts_with("IL"))
Alz_IL<-cbind(training$diagnosis, IL_predictors)
modelFit <- train(training$diagnosis ~ .,method="glm",preProcess="pca",data=training)
View(training)
modelFit <- train(Alz_IL$diagnosis ~ .,method="glm",preProcess="pca",data=training)
modelFit <- train(Alz_IL$diagnosis ~ .,method="glm",preProcess="pca",data=Alz_IL)
Alz_IL$diagnosis
View(Alz_IL)
Alz_IL<-cbind(training$diagnosis, IL_predictors)
View(Alz_IL)
modelFit <- train(training$diagnosis ~ .,method="glm",preProcess="pca",data=Alz_IL)
rename(training$diagnosis = diagnosis, Alz_IL)
?rename
rename(Alz_IL, training$diagnosis = diagnosis)
rename(Alz_IL, training$diagnosis, diagnosis)
rename(Alz_IL, training$diagnosis =  diagnosis)
rename(Alz_IL, training$diagnosis ==  diagnosis)
rename(Alz_IL, "training$diagnosis" = "diagnosis")
rename(Alz_IL, training$diagnosis = "diagnosis")
colnames(Alz_IL)
colnames(Alz_IL)[1]
colnames(Alz_IL)[1] <- "diagnosis"
modelFit <- train(diagnosis ~ .,method="glm",preProcess="pca",data=Alz_IL)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
data(iris); library(ggplot2)
names(iris)
table(iris$Species)
?iris
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
?qplot
library(caret)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
predict(modFit,newdata=testing)
View(training)
View(testing)
iris_compare<- (predict(modFit,newdata=testing) == testing$Species)
View(iris_compare)
?confusionMatrix
confusionMatrix(predict(modFit,newdata=testing), testing$Species)
dim(iris_compare==FALSE)
iris_compare==FALSE
select(iris_compare==FALSE)
length(iris_compare[iris_compare== FALSE])
library(ElemStatLearn); data(ozone,package="ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
install.packages("ElemStatLearn")
library(ElemStatLearn); data(ozone,package="ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
library(ISLR)
install.packages("ISLR")
library(ISLR); data(Wage); library(ggplot2); library(caret);
Wage <- subset(Wage,select=-c(logwage))
View(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
logwage
c(logwage)
data(Wage);
Wage <- subset(Wage,select=-c(logwage))
modFit <- train(wage ~ ., method="gbm",data=training,verbose=FALSE)
modFit <- train(wage ~ ., method="gbm",data=training,verbose=FALSE)
print(modFit)
qplot(predict(modFit,testing),wage,data=testing)
data(iris); library(ggplot2)
names(iris)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
modlda = train(Species ~ .,data=training,method="lda")
modnb = train(Species ~ ., data=training,method="nb")
modnb = train(Species ~ ., data=training,method="nb")
plda = predict(modlda,testing); pnb = predict(modnb,testing)
table(plda,pnb)
equalPredictions = (plda==pnb)
qplot(Petal.Width,Sepal.Width,colour=equalPredictions,data=testing)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
inTrain <- subset(segmentationOriginal, segmentationOriginal$Case== "Train")
training <- iris[inTrain,]
training <- segmentationOriginal[inTrain,]
training <- subset(segmentationOriginal, segmentationOriginal$Case== "Train")
testing <- subset(segmentationOriginal, segmentationOriginal$Case== "Test")
View(testing)
dim(testing)
dim(training)
dim(segmentationOriginal)
set.seed(125)
modFit <- train(Class ~ .,method="rpart",data=training)
print(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("pgmm"); library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
data(olive)
dim(olive)
olive = olive[,-1]
dim(olive)
data(olive)
olive = olive[,-1]
modFit <- train(Area ~ .,method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
require(devtools)
install_version("ggplot2", version = "0.9.1", repos = "http://cran.us.r-project.org")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
require(devtools)
install_version("ggplot2", version = "0.9.1", repos = "http://cran.us.r-project.org")
install.packages(c("backports", "boot", "class", "Hmisc", "isoband", "KernSmooth", "lattice", "MASS", "nlme", "nnet", "openxlsx", "pillar", "pkgbuild", "ps", "Rcpp", "RCurl", "rlang", "spatial", "survival", "tidyr", "tinytex", "withr", "xfun"))
install.packages(c("backports", "boot", "class", "Hmisc", "isoband", "KernSmooth", "lattice", "MASS", "nlme", "nnet", "openxlsx", "pillar", "pkgbuild", "ps", "Rcpp", "RCurl", "rlang", "spatial", "survival", "tidyr", "tinytex", "withr", "xfun"))
install.packages(c("backports", "boot", "class", "Hmisc", "isoband", "KernSmooth", "lattice", "MASS", "nlme", "nnet", "openxlsx", "pillar", "pkgbuild", "ps", "Rcpp", "RCurl", "rlang", "spatial", "survival", "tidyr", "tinytex", "withr", "xfun"))
install.packages(c("backports", "boot", "class", "Hmisc", "isoband", "KernSmooth", "lattice", "MASS", "nlme", "nnet", "openxlsx", "pillar", "pkgbuild", "ps", "Rcpp", "RCurl", "rlang", "spatial", "survival", "tidyr", "tinytex", "withr", "xfun"))
install.packages(c("backports", "boot", "class", "Hmisc", "isoband", "KernSmooth", "lattice", "MASS", "nlme", "nnet", "openxlsx", "pillar", "pkgbuild", "ps", "Rcpp", "RCurl", "rlang", "spatial", "survival", "tidyr", "tinytex", "withr", "xfun"))
install.packages(c("backports", "boot", "class", "Hmisc", "isoband", "KernSmooth", "lattice", "MASS", "nlme", "nnet", "openxlsx", "pillar", "pkgbuild", "ps", "Rcpp", "RCurl", "rlang", "spatial", "survival", "tidyr", "tinytex", "withr", "xfun"))
install.packages(c("backports", "boot", "class", "Hmisc", "isoband", "KernSmooth", "lattice", "MASS", "nlme", "nnet", "openxlsx", "pillar", "pkgbuild", "ps", "Rcpp", "RCurl", "rlang", "spatial", "survival", "tidyr", "tinytex", "withr", "xfun"))
install.packages(c("backports", "boot", "class", "Hmisc", "isoband", "KernSmooth", "lattice", "MASS", "nlme", "nnet", "openxlsx", "pillar", "pkgbuild", "ps", "Rcpp", "RCurl", "rlang", "spatial", "survival", "tidyr", "tinytex", "withr", "xfun"))
install.packages(c("backports", "boot", "class", "Hmisc", "isoband", "KernSmooth", "lattice", "MASS", "nlme", "nnet", "openxlsx", "pillar", "pkgbuild", "ps", "Rcpp", "RCurl", "rlang", "spatial", "survival", "tidyr", "tinytex", "withr", "xfun"))
require(devtools)
install.packages("devtools")
require(devtools)
install.packages("Rcpp")
install.packages("Rcpp")
require(devtools)
install.packages("~/Downloads/ElemStatLearn_2015.6.26.2.tar.gz", repos = NULL, type = "source")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(SAheart)
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, SAheart, family=binomial())
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA, fit)
missClass(trainSA, predict(fit, type="response"))
missClass(trainSA$chd, predict(fit, type="response"))
missClass(testSA$chd, predict(fit, type="response"))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
View(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.test)
set.seed(33833)
modFit <- train(y ~ .,data=vowel.train,method="rf",prox=TRUE)
modFit <- train(y ~ ., data=vowel.train, method="rf",prox=TRUE)
library(caret)
modFit <- train(y ~ ., data=vowel.train, method="rf",prox=TRUE)
modFit <- train(y ~ ., data=vowel.train, method="rf",prox=TRUE)
?varImp
varImp(modFit, scale = FALSE)
missClass(testSA$chd, predict(fit, trainSA, type="response"))
missClass(trainSA$chd, predict(modelSA, newdata = trainSA))
missClass(trainSA$chd, predict(fit, newdata = trainSA))
missClass(trainSA$chd, predict(fit, newdata = trainSA), type="response")
missClass(trainSA$chd, type="response", predict(fit, newdata = trainSA))
missClass(trainSA$chd,  predict(fit, newdata = trainSA))
missClass(trainSA$chd,  predict(fit, newdata = testSA))
set.seed(13234)
modelSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass(testSA$chd, predict(modelSA, newdata = testSA))
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
set.seed(13234)
# definition of the training model
regModel <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
# computation of the misclasssification on the training set and test set
missClassTrain <- missClass(trainSA$chd,predict(regModel,newdata=trainSA))
missClassTest <- missClass(testSA$chd,predict(regModel,newdata=testSA))
missClassTrain
library(ElemStatLearn)
library(caret)
library(gbm)
library(AppliedPredictiveModeling)
library(lubridate) # For year() function below
library(AppliedPredictiveModeling)
library(readr)
pml_training <- read_csv("Documents/workspace/Git_Repositories/Coursera Data Science/datasciencecoursera Projects/08 Machine Learning Project/Data/pml-training.csv")
View(pml_training)
str(pml_training)
which( colnames(pml_training)=="$classe" )
which(colnames(pml_training)=="$classe" )
getColumnNumber(pml_training,"classe")
match("classe",names(pml_training))
unique(pml_training$classe)
unique(pml_training$kurtosis_roll_forearm)
View(pml_training)
View(pml_training)
unique(pml_training$skewness_yaw_arm)
?rm
rm(fit)
rm(modelSA)
rm(modFit)
rm(list = ls())
source('~/Documents/workspace/GitHub/Coursera Data Science/datasciencecoursera Projects/08 Practical Machine Learning Project/PLM_TestCode.R')
source('~/Documents/workspace/GitHub/Coursera Data Science/datasciencecoursera Projects/08 Practical Machine Learning Project/PLM_TestCode.R')
setwd("~/Documents/workspace/GitHub/Coursera Data Science/datasciencecoursera Projects/08 Practical Machine Learning Project")
library(readr)
pml_training <- read_csv("Documents/workspace/GitHub/Coursera Data Science/datasciencecoursera Projects/08 Practical Machine Learning Project/Data/pml-training.csv")
pml_training <- read_csv("~/Documents/workspace/GitHub/Coursera Data Science/datasciencecoursera Projects/08 Practical Machine Learning Project/Data/pml-training.csv")
source('~/Documents/workspace/GitHub/Coursera Data Science/datasciencecoursera Projects/08 Practical Machine Learning Project/PLM_TestCode.R')
source('~/Documents/workspace/GitHub/Coursera Data Science/datasciencecoursera Projects/08 Practical Machine Learning Project/PLM_TestCode.R')
source('~/Documents/workspace/GitHub/Coursera Data Science/datasciencecoursera Projects/08 Practical Machine Learning Project/PLM_TestCode.R')
source('~/Documents/workspace/GitHub/Coursera Data Science/datasciencecoursera Projects/08 Practical Machine Learning Project/PLM_TestCode.R')
pml_test <- read_csv("~/Documents/workspace/GitHub/Coursera Data Science/datasciencecoursera Projects/08 Practical Machine Learning Project/Data/pml-test.csv")
pml_test <- read_csv("~/Documents/workspace/GitHub/Coursera Data Science/datasciencecoursera Projects/08 Practical Machine Learning Project/Data/pml-testing.csv")
str(pml_training)
source('~/Documents/workspace/GitHub/Coursera Data Science/datasciencecoursera Projects/08 Practical Machine Learning Project/PLM_TestCode.R')
summary(trainingset)
View(trainingset)
?subset
train1<- trainingset[-c(1:7)]
View(train1)
sum(is.na(train1))
sum(is.na(train1[c(1:20)]))
is.na(train1[c(1:20)])
dim(is.na(train1[c(1:20)]))
dim(is.na(train1[c(,1:20)]))
dim(is.na(train1[c(:,1:20)]))
dim(is.na(train1[c(1:20,)]))
dim(is.na(train1[c(1:20,:)]))
dim(is.na(train1[c(1:20)]))
dim(colsum(is.na(train1[c(1:20)])))
?colsum
?colsums
?colsum
?colSums
dim(colSums(is.na(train1[c(1:20)])))
dim(colSums(is.na(train1[c(1:20)]==TRUE)))
dim(colSums(is.na(train1[c(1:2)]==TRUE)))
is.na(train1[c(1:2)]
)
is.na(train1[c(1:10, 1:2)]
)
train1[1:10, 1:2]
is.na(train1[1:10, 1:2])
ColSums(is.na(train1[1:10, 1:2]))
ColSums(is.na(train1[1:10, 1:2]))
colSums(is.na(train1[1:10, 1:2]))
colSums(is.na(train1[, 1:2]))
colSums(is.na(train1[, 1:50]))
colSums(is.na(train1[, 1:10]))
colSums(is.na(train1[, 1:10])) / colMeans(is.na(train1[, 1:10]))
colSums(is.na(train1[, ])) / colMeans(is.na(train1[, ]))
colSums(is.na(train1[, ]))
train1_NAs<-colSums(is.na(train1[, ]))
View(train1_NAs)
is.na(train1$kurtosis_roll_belt)
sum(is.na(train1$kurtosis_roll_belt))
train1$kurtosis_roll_belt[868:880]
train1$kurtosis_roll_belt[868:880]!=0
train1$kurtosis_roll_belt[868:880] =="#DIV/0!"
train1_NAs<-colSums(is.na(train1[, ]))
train1_NAs<-colSums(is.na(train1[, ]))
train2<- select(train1, colSums(is.na(train1[, ])==0)
)
train2<- select(train1, colSums(is.na(train1[, ])==0) )
library(dplyr)
train2<- select(train1, colSums(is.na(train1[, ])==0) )
train2<- select(train1, which(colSums(is.na(train1[, ])==0)) )
which(colSums(is.na(train1[, ])==0))
colSums(is.na(train1[, ])==0)
colSums(is.na(train1[, ])
)
colSums(is.na(train1[, ]))==0
which(colSums(is.na(train1[, ]))==0)
train2<-select(train1, which(colSums(is.na(train1[, ]))==0))
colSums(is.na(train2[, ])
)
train2<-select(train1, which(colSums(is.na(train1[, ]))==0))
train2<-select(train1, colSums(is.na(train1[, ]))==0)
train2<-select(train1, which(colSums(is.na(train1[, ]))==0))
colSums(is.na(train2[, ]))
sum(is.na(train2))
sum(is.na(train1))
View(train2)
unique(train2)
str(train2)
which(colSums(is.numeric(train1[, ])))
colSums(is.numeric(train1[, ])))
colSums(is.numeric(train1[, ]))
colSums(is.numeric(train1[,: ]))
is.numeric(train1[, ])
is.numeric(train1[ ])
train1[ ]
is.numeric(train1[ ,])
is.numeric(train1[: ,:])
is.numeric(train1[ ,:])
is.numeric(train1[ ,])
sum(is.na(train1))
sum(is.numeric(train1))
is.numeric(train1)
str(train2)
unique(train2)
head(train2)
?any
any(train2 = "#DIV/0!")
str(train2)
colnames(train2)
?str
str(train2)$file
str(train2)[1]
print(str(train2))
table(train2)
length(which(train == "1"))
length(which(train2 == "1"))
length(which(train2 == 1))
length(which(train2 == 0.02))
length(which(train2 == 3))
length(which(train2 == -22))
length(which(train2 == "DIV/0!"))
length(which(train2 == "#DIV/0!"))
length(which(train1 == "#DIV/0!"))
length(which(train1 == "NA"))
length(which(train1 == NA))
length(which(train1 == "#DIV/0!"))
length(which(train2 == "#DIV/0!"))
length(which(train2 == "#DIV/0!"))
sapply(train2, class)
sapply(train2, unique)
length(sapply(train2, unique) )
sapply(train2, unique) [1]
length(sapply(train2, unique) [1])
length(sapply(train2, unique) [2])
sapply(train2, unique) [2]
sapply(train2, unique) [3]
sapply(train2, unique) [2]
sapply(train2, unique) [30]
length(sapply(train2, unique) [30])
length(sapply(train2, unique)) [30]
sapply(train2, unique)[30]
sapply(train2, unique)[30][1]
sapply(train2, unique)[30][3]
sapply(train2, unique)[30][2]
test<- sapply(train2, unique)[30]
test
dim(test)
class(test)
class(test[1])
length(test[1])
test
test[1]
length(test[1])
class(test)
length(test[[1])
length(test[[1]])
test<- sapply(train2, unique)[30]
sapply(train2, unique)[30]
length(sapply(train2, unique)[[1]]
)
sapply(train2, unique)[[1]]
sapply(train2, unique)[[]]
sapply(train2, unique)[
]
sapply(train2, unique)[[1]]
sapply(train2, unique)[[]]
sapply(train2, unique)[1]
sapply(train2, unique)[2]
test<-sapply(train2, unique)
View(test)
length(test)
length(test[[1]])
length(test[[2]])
length(test[[]])
length(test[[4]])
library(caret)
modFit <- train(classe~ .,data=train2,method="rf",prox=TRUE)
predictTreeMod1 <- predict(decisionTreeMod1, testset, type = "class")
cmtree <- confusionMatrix(predictTreeMod1, testset$classe)
cmtree
rm(list = ls())
setwd("~/Documents/workspace/GitHub/Coursera Data Science/datasciencecoursera Projects/08 Practical Machine Learning Project")
library(dplyr)
library(readr)
library(caret)
library(rattle)
trainingset <- read_csv("~/Documents/workspace/GitHub/Coursera Data Science/datasciencecoursera Projects/08 Practical Machine Learning Project/Data/pml-training.csv")
testset <- read_csv("~/Documents/workspace/GitHub/Coursera Data Science/datasciencecoursera Projects/08 Practical Machine Learning Project/Data/pml-testing.csv")
train1<- trainingset[-c(1:7)]
train2<-select(train1, which(colSums(is.na(train1[, ]))==0))
train2$classe<-factor(train2$classe)
inTrain <- createDataPartition(y=train2$classe, p=0.7, list=FALSE)
train_data <- train2[inTrain,]
test_data <- train2[-inTrain,]
#str(trainingset)
#sum(is.na(train1))
set.seed(12345)
modFit_PT <- rpart(classe ~ ., data=train_data, method="class")
fancyRpartPlot(modFit_PT)
predict_PT <- predict(modFit_PT, test_data, type = "class")
cm_PT <- confusionMatrix(predict_PT, test_data$classe)
cm_PT
library(rpart)
set.seed(12345)
modFit_PT <- rpart(classe ~ ., data=train_data, method="class")
fancyRpartPlot(modFit_PT)
predict_PT <- predict(modFit_PT, test_data, type = "class")
cm_PT <- confusionMatrix(predict_PT, test_data$classe)
cm_PT
source('~/Documents/workspace/GitHub/Coursera Data Science/datasciencecoursera Projects/08 Practical Machine Learning Project/PLM_TestCode.R')
cm_PT
modFit_RF <- randomForest(classe ~ ., data=train_data)
library(randomForest)
modFit_RF <- randomForest(classe ~ ., data=train_data)
predict_RF <- predict(modFit_RF, test_data, type = "class")
cm_RF <- confusionMatrix(predict_RF, test_data$classe)
cm_RF
validate_RF <- predict(modFit_RF, testset, type = "class")
validate_RF
validate_PT <- predict(modFit_RF, testset, type = "class")
validate_PT
